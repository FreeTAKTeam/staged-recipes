# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  version: 4.1.0

package:
  name: node-red
  version: ${{ version }}

source:
  - url: https://github.com/node-red/node-red/archive/refs/tags/4.1.0.tar.gz
    sha256: 9d773d99cc291c59140bfc4f2eb48706d52135828ed3c7376d4ec7c2fba93ae1
    file_name: node-red.tgz
    target_directory: node-red-src

  - path: service.yaml
    target_directory: service-config

build:
  number: 0
  script:
    interpreter: nu
    content: |
      $"building ($env.PKG_NAME)!"

      # Extract the tarball first
      cd node-red-src
      tar -xzf node-red.tgz
      cd ..

      npm install -g ./node-red-src/node-red.tgz --prefix ${{ PREFIX }}

      ## Create node-red wrapper script

      # Define the installation paths using Nushell variables
      let bin_dir = $"($env.PREFIX)/bin"
      let node_red_lib = $"($env.PREFIX)/lib/node_modules/node-red/packages/node_modules/node-red/red.js"

      # Create the bin directory if it doesn't exist
      mkdir $bin_dir

      # Generate the script content based on the OS
      when ($nu.os-info.family) {
          "unix" => {
              # Create a literal string for the bash script.
              # This will be written to the file without Nushell trying to interpolate it.
              # Note: You can't interpolate inside single quotes
              let path = $"($node_red_lib)"
              let node_red_bin = $"($bin_dir)/node-red"
              $"#!/bin/sh
              exec node \"($path)\" \"$@\"
              " | save $node_red_bin
              chmod +x $node_red_bin
          }
          "windows" => {
              # This creates a valid Windows batch file
              let path = $"($node_red_lib)"
              $"@echo off
              \"%CONDA_PREFIX%\Scripts\node\" \"($path)\" %*
              " | save $"($bin_dir)/node-red.cmd"
          }
          _ => error "Unsupported OS family"
      }

      # Install service configuration file on Linux
      print "Installing service configuration file..."

      let config_dir = $"($env.PREFIX)/config"
      mkdir $config_dir
      cp $"($env.SRC_DIR)/service-config/service.yaml" $"($config_dir)/service.yaml"

      # Verify the file was placed correctly
      if ($"($config_dir)/service.yaml" | path exists) {
        print $"✓ Service configuration installed to: ($config_dir)/service.yaml"
      } else {
        print $"❌ Failed to install service configuration to: ($config_dir)/service.yaml"
      }

      # Create a simple license summary since npm_licenses.nu script is not available in build environment
      echo "Node-RED npm dependencies license information generated during build" | save license_summary.txt
      if (which npm | is-not-empty) {
        try {
          npm list --depth=0 --json | from json | get dependencies | columns | each { |pkg| $"($pkg): Check npm registry for license" } | str join "\n" | save --append license_summary.txt
        } catch {
          echo "Could not generate detailed npm license list" | save --append license_summary.txt
        }
      }

requirements:
  build:
    - nushell
    - nodejs
  host:
    - nodejs
    - grunt
  run:
    - nodejs

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # Node-RED Node.js package
        - ${{ "Library/" if win }}lib/node_modules/node-red/package.json
          # Binary/executable
        - ${{ "Library/" if win }}bin/node-red${{ ".cmd" if win }}
          # Service configuration file (Linux only)
        - ${{ "config/service.yaml" if linux }}

      # Test 2: Functional tests
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        - ^find . -maxdepth 2
        - ^echo "node-red --help"

about:
  homepage: https://nodered.org
  summary: Low-code programming for event-driven applications
  description: |
    Node-RED's goal is to enable anyone to build applications that collect,
      transform and visualize their data;
      building flows that can automate their world.
      Its low-code nature makes it accessible to users of any background,
      whether for home automation,
      industrial control systems or anything in between.
  license: Apache-2.0
  license_file:
    - node-red-src/node-red-4.1.0/LICENSE
    - license_summary.txt
  documentation: https://nodered.org/docs/
  repository: https://github.com/node-red/node-red

extra:
  recipe-maintainers:
    - phreed
